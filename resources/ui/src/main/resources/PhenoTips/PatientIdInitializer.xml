<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>PhenoTips</web>
  <name>PatientIdInitializer</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>PhenoTips.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1320971449000</creationDate>
  <date>1322785449000</date>
  <contentUpdateDate>1322785449000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import org.xwiki.observation.*
import org.xwiki.observation.event.*
import org.xwiki.context.*
import com.xpn.xwiki.web.*
import com.xpn.xwiki.*
import org.apache.velocity.VelocityContext;

class CI_PatientRecordSaveListener implements EventListener
{
    def xwiki
    def context

    CI_PatientRecordSaveListener(xwiki, context)
    {
        this.xwiki = xwiki
        this.context = context
    }

    String getName()
    {
        // The unique name of this event listener
        return "CI_PatientRecordSaveListener"
    }

    List&lt;Event&gt; getEvents()
    {
        // The list of events this listener listens to
        return Arrays.asList(new DocumentSaveEvent(), new DocumentUpdateEvent())
    }

    // Called by the Observation Manager when an event matches the list of events returned
    // by getEvents()
    void onEvent(Event event, Object source, Object data)
    {
        // Current context
        def crtContext = Utils.getComponent(Execution.class).getContext().getProperty('xwikicontext')
        // Check if the document is a patient record
        def prObject = source.getObject("PhenoTips.PatientClass");
        // Need to update the document?
        def doUpdate = false
        // Is it a patient record document ?
        if (prObject != null &amp;&amp; source.getName() != "PatientTemplate") {
           synchronized (this) {
              // If there is no identifier, set it.
              if (prObject.get("identifier").getValue() == null) {
                 // try to obtain the id from the name
                 def inferredID
                 try {
                   inferredID = Integer.parseInt(source.name.substring(1))
                 } catch (Exception ex) {
                   def crtMaxID
                   def crtMaxIDList = crtContext.getWiki().search("select prop.value from BaseObject obj, LongProperty prop where obj.className = 'PhenoTips.PatientClass' and prop.id.id = obj.id and prop.id.name = 'identifier' order by 1 desc", 1, 0, crtContext)
                   if (crtMaxIDList.size() &gt; 0) {
                     crtMaxID = crtMaxIDList.get(0) + 1
                   } else {
                     crtMaxID = 1
                   }
                   inferredID = crtMaxID
                 }
                 prObject.set("identifier", (long)inferredID, crtContext)
                 // Modification done, needs update
                 doUpdate = true
              }
              // Save the changes
              if (doUpdate) {
                 // Force the storage to keep the same version number, so that this looks like a single save event.
                 source.setMetaDataDirty(false);
                 source.setContentDirty(false);
                 crtContext.getWiki().saveDocument(source, source.getComment(), source.isMinorEdit(), crtContext);
              }
           }
        }
    }
}

// Register against the Observation Manager
def observation = Utils.getComponent(ObservationManager.class)
observation.removeListener("CI_PatientRecordSaveListener")
def listener = new CI_PatientRecordSaveListener(xwiki, xcontext)
observation.addListener(listener)
{{/groovy}}</content>
</xwikidoc>
